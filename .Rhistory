orientation = "y", size = 3, fatten = 2) +
geom_linerange(aes(xmin = X2.5,
xmax = X97.5,
color = type),
orientation = "y", size = 1.5) +
scale_y_discrete(limits = rev) +
scale_color_brewer(palette = "Dark2") +
theme_bw() +
theme(legend.key.size = unit(2, "cm"),
plot.title = element_text(hjust = 0.5, vjust = 1.5),
text = element_text(size = 28)) +
labs(x = "log(Minimum Distance Travelled)",
y = "Species",
title = "Credible Intervals of Model Slope (b) and Intercept (mu)")
print(posteriors_plot)
dev.off()
#add metadata to quantiles
posterior_quantiles_DT <- mutate(posterior_quantiles_DT, array = "DT", type = "Empirical")
posterior_quantiles_Pentagon <- mutate(posterior_quantiles_Pentagon, array = "Pentagon", type = "Empirical")
posterior_quantiles_Zed <- mutate(posterior_quantiles_Zed, array = "Zed", type = "Empirical")
posterior_quantiles_sim_DT <- mutate(posterior_quantiles_sim_DT, array = "DT", type = "Simulated")
posterior_quantiles_sim_Pentagon <- mutate(posterior_quantiles_sim_Pentagon, array = "Pentagon", type = "Simulated")
posterior_quantiles_sim_Zed <- mutate(posterior_quantiles_sim_Zed, array = "Zed", type = "Simulated")
#integrate quantiles from all analyses
all_posterior_quantiles <-  rbind(posterior_quantiles_DT, posterior_quantiles_Pentagon, posterior_quantiles_Zed, posterior_quantiles_sim_DT, posterior_quantiles_sim_Pentagon, posterior_quantiles_sim_Zed)
all_posterior_quantiles$species <- factor(all_posterior_quantiles$species, levels = c("Aye_Aye", "Dwarf_Lemur", "Mouse_Lemur", "Vervet", "Japanese_Macaque", "Reinforcement_Factor1", "Reinforcement_Factor1.2", "Reinforcement_Factor2"))
all_posterior_quantiles$type <- factor(all_posterior_quantiles$type, levels = c("Empirical", "Simulated"))
#plot for Supplement
posteriors_plot <- all_posterior_quantiles %>%
filter(param_type %in% c("mu_species", "b_species")) %>%
arrange(species) %>%
ggplot(aes(y = species)) + facet_grid(cols = vars(param_type), rows = vars(array) , scales = "free") +
geom_pointrange(aes(x = X50,
xmin = X10,
xmax = X90,
color = type),
orientation = "y", size = 1.5, fatten = 1.5) +
geom_linerange(aes(xmin = X5,
xmax = X95,
color = type),
orientation = "y", size = 0.8) +
scale_y_discrete(limits = rev) +
scale_color_brewer(palette = "Dark2") +
theme_bw() +
theme(legend.key.size = unit(0.75, "cm"),
plot.title = element_text(hjust = 0.75)) +
labs(x = "log(Minimum Distance Travelled)",
y = "Species",
title = "Posterior Estimates of Model Slope (b) and Intercept (mu)")
print(posteriors_plot)
#plot for manuscript
tiff(filename = "../Docs/Figure 5_Credible Intervals.tif", width = 1200, height = 1000)
posteriors_plot <- all_posterior_quantiles %>%
filter(param_type %in% c("mu_species", "b_species")) %>%
arrange(species) %>%
mutate(species = factor(gsub("_", " ", species),
levels = c("Aye Aye", "Dwarf Lemur", "Mouse Lemur", "Vervet", "Japanese Macaque", "Reinforcement Factor1", "Reinforcement Factor1.2", "Reinforcement Factor2"))) %>%
ggplot(aes(y = species)) + facet_grid(cols = vars(param_type), rows = vars(array) , scales = "free") +
geom_pointrange(aes(x = X50,
xmin = X10,
xmax = X90,
color = type),
orientation = "y", size = 3, fatten = 2) +
geom_linerange(aes(xmin = X2.5,
xmax = X97.5,
color = type),
orientation = "y", size = 1.5) +
scale_y_discrete(limits = rev) +
scale_color_brewer(palette = "Dark2") +
theme_bw() +
theme(legend.key.size = unit(2, "cm"),
plot.title = element_text(hjust = 0.5, vjust = 1.5),
text = element_text(size = 28),
axis.text.y = element_text(angle = 10)) +
labs(x = "log(Minimum Distance Travelled)",
y = "Species",
title = "Credible Intervals of Model Slope (b) and Intercept (mu)")
print(posteriors_plot)
dev.off()
#add metadata to quantiles
posterior_quantiles_DT <- mutate(posterior_quantiles_DT, array = "DT", type = "Empirical")
posterior_quantiles_Pentagon <- mutate(posterior_quantiles_Pentagon, array = "Pentagon", type = "Empirical")
posterior_quantiles_Zed <- mutate(posterior_quantiles_Zed, array = "Zed", type = "Empirical")
posterior_quantiles_sim_DT <- mutate(posterior_quantiles_sim_DT, array = "DT", type = "Simulated")
posterior_quantiles_sim_Pentagon <- mutate(posterior_quantiles_sim_Pentagon, array = "Pentagon", type = "Simulated")
posterior_quantiles_sim_Zed <- mutate(posterior_quantiles_sim_Zed, array = "Zed", type = "Simulated")
#integrate quantiles from all analyses
all_posterior_quantiles <-  rbind(posterior_quantiles_DT, posterior_quantiles_Pentagon, posterior_quantiles_Zed, posterior_quantiles_sim_DT, posterior_quantiles_sim_Pentagon, posterior_quantiles_sim_Zed)
all_posterior_quantiles$species <- factor(all_posterior_quantiles$species, levels = c("Aye_Aye", "Dwarf_Lemur", "Mouse_Lemur", "Vervet", "Japanese_Macaque", "Reinforcement_Factor1", "Reinforcement_Factor1.2", "Reinforcement_Factor2"))
all_posterior_quantiles$type <- factor(all_posterior_quantiles$type, levels = c("Empirical", "Simulated"))
#plot for Supplement
posteriors_plot <- all_posterior_quantiles %>%
filter(param_type %in% c("mu_species", "b_species")) %>%
arrange(species) %>%
ggplot(aes(y = species)) + facet_grid(cols = vars(param_type), rows = vars(array) , scales = "free") +
geom_pointrange(aes(x = X50,
xmin = X10,
xmax = X90,
color = type),
orientation = "y", size = 1.5, fatten = 1.5) +
geom_linerange(aes(xmin = X5,
xmax = X95,
color = type),
orientation = "y", size = 0.8) +
scale_y_discrete(limits = rev) +
scale_color_brewer(palette = "Dark2") +
theme_bw() +
theme(legend.key.size = unit(0.75, "cm"),
plot.title = element_text(hjust = 0.75)) +
labs(x = "log(Minimum Distance Travelled)",
y = "Species",
title = "Posterior Estimates of Model Slope (b) and Intercept (mu)")
print(posteriors_plot)
#plot for manuscript
tiff(filename = "../Docs/Figure 5_Credible Intervals.tif", width = 1200, height = 1000)
posteriors_plot <- all_posterior_quantiles %>%
filter(param_type %in% c("mu_species", "b_species")) %>%
arrange(species) %>%
mutate(species = factor(gsub("_", " ", species),
levels = c("Aye Aye", "Dwarf Lemur", "Mouse Lemur", "Vervet", "Japanese Macaque", "Reinforcement Factor1", "Reinforcement Factor1.2", "Reinforcement Factor2"))) %>%
ggplot(aes(y = species)) + facet_grid(cols = vars(param_type), rows = vars(array) , scales = "free") +
geom_pointrange(aes(x = X50,
xmin = X10,
xmax = X90,
color = type),
orientation = "y", size = 3, fatten = 2) +
geom_linerange(aes(xmin = X2.5,
xmax = X97.5,
color = type),
orientation = "y", size = 1.5) +
scale_y_discrete(limits = rev) +
scale_color_brewer(palette = "Dark2") +
theme_bw() +
theme(legend.key.size = unit(2, "cm"),
plot.title = element_text(hjust = 0.5, vjust = 1.5),
text = element_text(size = 28),
axis.text.y = element_text(angle = 15)) +
labs(x = "log(Minimum Distance Travelled)",
y = "Species",
title = "Credible Intervals of Model Slope (b) and Intercept (mu)")
print(posteriors_plot)
dev.off()
?plot
#Figure for Manuscript
Trial <- 1:max(DT_data$Trial)
pal <- brewer.pal(n = 8, name = "Dark2")
species <- c("Aye Aye", "Dwarf Lemur", "Mouse Lemur", "Vervet")
sample_set <- sample(1:4000, size = 100)
tiff("../Docs/Figure 2_Posterior_Predictions.tif", width = 1600, height = 1200)
layout(matrix(c(1,1,2,2,3,3,4,4,0,5,5,0,6,6,7,7), ncol = 8, byrow = TRUE))
par(mar = c(10,10,8,4))
for (i in 1:4) { #loop over each species (column in posterior estimates)
plot(1, type = "n", xlim = c(0, max(DT_data$Trial_scaled)), ylim = c(4,6.5), ylab = NA, xlab = NA, cex.axis = 2, cex.lab = 3, bty = "l") #create empty plotting window.
title(ylab = "log(Distance)", xlab = "log(Trial)", cex.lab = 3, line = 4)
title(main = species[i], line = -2, cex.main = 3)
Distance_mean <- mean(posteriors_DT$mu_species[,i]) + mean(posteriors_DT$b_species[,i]) * log(Trial)
lines(x = log(Trial), y = Distance_mean, col = pal[i], lwd = 3)
for (j in sample_set) {
lines(x = log(Trial), y = posteriors_DT$mu_species[j,i] + posteriors_DT$b_species[j,i] * log(Trial), col = alpha(pal[i], alpha = 0.05), lwd = 2)
}
species_data <- filter(DT_data, Species == gsub(" ", "_", species[i]))
points(x = species_data$Trial_scaled, y = species_data$Distance_scaled, col = pal[i], pch = 19, cex = 1.5)
}
Trial <- 1:max(Pentagon_data$Trial)
pal <- brewer.pal(n = 8, name = "Dark2")
species <- c("Vervet")
sample_set <- sample(1:4000, size = 100)
#par(mar = c(10,10,10,4))
for (i in 1:1) { #loop over each species (column in posterior estimates)
plot(1, type = "n", xlim = c(0, max(Pentagon_data$Trial_scaled)), ylim = c(3.5,4), ylab = NA, xlab = NA, cex.axis = 2, cex.lab = 3) #create empty plotting window.
title(ylab = "log(Distance)", xlab = "log(Trial)", cex.lab = 3, line = 4)
title(main = species[i], line = -2, cex.main = 3)
Distance_mean <- mean(posteriors_Pentagon$mu_species[,i]) + mean(posteriors_Pentagon$b_species[,i]) * log(Trial)
lines(x = log(Trial), y = Distance_mean, col = pal[4], lwd = 3)
for (j in sample_set) {
lines(x = log(Trial), y = posteriors_Pentagon$mu_species[j,i] + posteriors_Pentagon$b_species[j,i] * log(Trial), col = alpha(pal[4], alpha = 0.05), lwd = 2)
}
species_data <- filter(Pentagon_data, Species == gsub(" ", "_", species[i]))
points(x = species_data$Trial_scaled, y = species_data$Distance_scaled, col = pal[4], pch = 19, cex = 1.5)
}
Trial <- 1:max(Zed_data$Trial)
pal <- brewer.pal(n = 8, name = "Dark2")
species <- c("Japanese Macaque", "Vervet")
sample_set <- sample(1:4000, size = 100)
for (i in 1:2) { #loop over each species (column in posterior estimates)
plot(1, type = "n", xlim = c(0, max(Zed_data$Trial_scaled)), ylim = c(3.8,4.5), ylab = NA, xlab = NA, cex.axis = 2, cex.lab = 3) #create empty plotting window.
title(ylab = "log(Distance)", xlab = "log(Trial)", cex.lab = 3, line = 4)
title(main = species[i], line = -2, cex.main = 3)
Distance_mean <- mean(posteriors_Zed$mu_species[,i]) + mean(posteriors_Zed$b_species[,i]) * log(Trial)
lines(x = log(Trial), y = Distance_mean, col = pal[6-i], lwd = 3)
for (j in sample_set) {
lines(x = log(Trial), y = posteriors_Zed$mu_species[j,i] + posteriors_Zed$b_species[j,i] * log(Trial), col = alpha(pal[6-i], alpha = 0.05), lwd = 2)
}
species_data <- filter(Zed_data, Species == gsub(" ", "_", species[i]))
points(x = species_data$Trial_scaled, y = species_data$Distance_scaled, col = pal[6-i], pch = 19, cex = 1.5)
}
par(xpd = NA) #removes gridding of layout for placing geometries across whole plot
#box(which = "figure", col = "red", lwd = 3)
#DT Section
rect(-27,4.7,5.85,5.71, border = "grey30", lwd = 8)
text(x = -10, y = 5.65, labels = "Double Trapezoid", col = "grey30", cex = 6)
#Pentagon Section
rect(-27, 3.62, -10.35, 4.68, border = "grey30", lwd = 8)
text(x = -18.3, y = 4.6, labels = "Pentagon", cex = 6, col = "grey30")
#Zed Section
rect(-10.1, 3.62, 5.85, 4.68, border = "grey30", lwd = 8)
text(x = -1.7, y = 4.6, labels = "Z-Array", cex = 6, col = "grey30")
dev.off()
#Figure for Manuscript
Trial <- 1:max(DT_data$Trial)
pal <- brewer.pal(n = 8, name = "Dark2")
species <- c("Aye Aye", "Dwarf Lemur", "Mouse Lemur", "Vervet")
sample_set <- sample(1:4000, size = 100)
tiff("../Docs/Figure 2_Posterior_Predictions.tif", width = 1600, height = 1200)
layout(matrix(c(1,1,2,2,3,3,4,4,0,5,5,0,6,6,7,7), ncol = 8, byrow = TRUE))
par(mar = c(10,10,8,4))
for (i in 1:4) { #loop over each species (column in posterior estimates)
plot(1, type = "n", xlim = c(0, max(DT_data$Trial_scaled)), ylim = c(4,6.5), ylab = NA, xlab = NA, cex.axis = 2, cex.lab = 3, bty = "l") #create empty plotting window.
title(ylab = "log(Distance)", xlab = "log(Trial)", cex.lab = 3, line = 4)
title(main = species[i], line = -2, cex.main = 3)
Distance_mean <- mean(posteriors_DT$mu_species[,i]) + mean(posteriors_DT$b_species[,i]) * log(Trial)
lines(x = log(Trial), y = Distance_mean, col = pal[i], lwd = 3)
for (j in sample_set) {
lines(x = log(Trial), y = posteriors_DT$mu_species[j,i] + posteriors_DT$b_species[j,i] * log(Trial), col = alpha(pal[i], alpha = 0.05), lwd = 2)
}
species_data <- filter(DT_data, Species == gsub(" ", "_", species[i]))
points(x = species_data$Trial_scaled, y = species_data$Distance_scaled, col = pal[i], pch = 19, cex = 1.5)
}
Trial <- 1:max(Pentagon_data$Trial)
pal <- brewer.pal(n = 8, name = "Dark2")
species <- c("Vervet")
sample_set <- sample(1:4000, size = 100)
#par(mar = c(10,10,10,4))
for (i in 1:1) { #loop over each species (column in posterior estimates)
plot(1, type = "n", xlim = c(0, max(Pentagon_data$Trial_scaled)), ylim = c(3.5,4), ylab = NA, xlab = NA, cex.axis = 2, cex.lab = 3, bty = "l") #create empty plotting window.
title(ylab = "log(Distance)", xlab = "log(Trial)", cex.lab = 3, line = 4)
title(main = species[i], line = -2, cex.main = 3)
Distance_mean <- mean(posteriors_Pentagon$mu_species[,i]) + mean(posteriors_Pentagon$b_species[,i]) * log(Trial)
lines(x = log(Trial), y = Distance_mean, col = pal[4], lwd = 3)
for (j in sample_set) {
lines(x = log(Trial), y = posteriors_Pentagon$mu_species[j,i] + posteriors_Pentagon$b_species[j,i] * log(Trial), col = alpha(pal[4], alpha = 0.05), lwd = 2)
}
species_data <- filter(Pentagon_data, Species == gsub(" ", "_", species[i]))
points(x = species_data$Trial_scaled, y = species_data$Distance_scaled, col = pal[4], pch = 19, cex = 1.5)
}
Trial <- 1:max(Zed_data$Trial)
pal <- brewer.pal(n = 8, name = "Dark2")
species <- c("Japanese Macaque", "Vervet")
sample_set <- sample(1:4000, size = 100)
for (i in 1:2) { #loop over each species (column in posterior estimates)
plot(1, type = "n", xlim = c(0, max(Zed_data$Trial_scaled)), ylim = c(3.8,4.3), ylab = NA, xlab = NA, cex.axis = 2, cex.lab = 3, bty = "l") #create empty plotting window.
title(ylab = "log(Distance)", xlab = "log(Trial)", cex.lab = 3, line = 4)
title(main = species[i], line = -2, cex.main = 3)
Distance_mean <- mean(posteriors_Zed$mu_species[,i]) + mean(posteriors_Zed$b_species[,i]) * log(Trial)
lines(x = log(Trial), y = Distance_mean, col = pal[6-i], lwd = 3)
for (j in sample_set) {
lines(x = log(Trial), y = posteriors_Zed$mu_species[j,i] + posteriors_Zed$b_species[j,i] * log(Trial), col = alpha(pal[6-i], alpha = 0.05), lwd = 2)
}
species_data <- filter(Zed_data, Species == gsub(" ", "_", species[i]))
points(x = species_data$Trial_scaled, y = species_data$Distance_scaled, col = pal[6-i], pch = 19, cex = 1.5)
}
par(xpd = NA) #removes gridding of layout for placing geometries across whole plot
#box(which = "figure", col = "red", lwd = 3)
#DT Section
rect(-27,4.7,5.85,5.71, border = "grey30", lwd = 8)
text(x = -10, y = 5.65, labels = "Double Trapezoid", col = "grey30", cex = 6)
#Pentagon Section
rect(-27, 3.62, -10.35, 4.68, border = "grey30", lwd = 8)
text(x = -18.3, y = 4.6, labels = "Pentagon", cex = 6, col = "grey30")
#Zed Section
rect(-10.1, 3.62, 5.85, 4.68, border = "grey30", lwd = 8)
text(x = -1.7, y = 4.6, labels = "Z-Array", cex = 6, col = "grey30")
dev.off()
#Figure for Manuscript
Trial <- 1:max(DT_data$Trial)
pal <- brewer.pal(n = 8, name = "Dark2")
species <- c("Aye Aye", "Dwarf Lemur", "Mouse Lemur", "Vervet")
sample_set <- sample(1:4000, size = 100)
tiff("../Docs/Figure 2_Posterior_Predictions.tif", width = 1600, height = 1200)
layout(matrix(c(1,1,2,2,3,3,4,4,0,5,5,0,6,6,7,7), ncol = 8, byrow = TRUE))
par(mar = c(10,10,8,4))
for (i in 1:4) { #loop over each species (column in posterior estimates)
plot(1, type = "n", xlim = c(0, max(DT_data$Trial_scaled)), ylim = c(4,6.5), ylab = NA, xlab = NA, cex.axis = 2, cex.lab = 3, bty = "l") #create empty plotting window.
title(ylab = "log(Distance)", xlab = "log(Trial)", cex.lab = 3, line = 4)
title(main = species[i], line = -2, cex.main = 3)
Distance_mean <- mean(posteriors_DT$mu_species[,i]) + mean(posteriors_DT$b_species[,i]) * log(Trial)
lines(x = log(Trial), y = Distance_mean, col = pal[i], lwd = 3)
for (j in sample_set) {
lines(x = log(Trial), y = posteriors_DT$mu_species[j,i] + posteriors_DT$b_species[j,i] * log(Trial), col = alpha(pal[i], alpha = 0.05), lwd = 2)
}
species_data <- filter(DT_data, Species == gsub(" ", "_", species[i]))
points(x = species_data$Trial_scaled, y = species_data$Distance_scaled, col = pal[i], pch = 19, cex = 1.5)
}
Trial <- 1:max(Pentagon_data$Trial)
pal <- brewer.pal(n = 8, name = "Dark2")
species <- c("Vervet")
sample_set <- sample(1:4000, size = 100)
#par(mar = c(10,10,10,4))
for (i in 1:1) { #loop over each species (column in posterior estimates)
plot(1, type = "n", xlim = c(0, max(Pentagon_data$Trial_scaled)), ylim = c(3.5,4), ylab = NA, xlab = NA, cex.axis = 2, cex.lab = 3, bty = "l") #create empty plotting window.
title(ylab = "log(Distance)", xlab = "log(Trial)", cex.lab = 3, line = 4)
title(main = species[i], line = -2, cex.main = 3)
Distance_mean <- mean(posteriors_Pentagon$mu_species[,i]) + mean(posteriors_Pentagon$b_species[,i]) * log(Trial)
lines(x = log(Trial), y = Distance_mean, col = pal[4], lwd = 3)
for (j in sample_set) {
lines(x = log(Trial), y = posteriors_Pentagon$mu_species[j,i] + posteriors_Pentagon$b_species[j,i] * log(Trial), col = alpha(pal[4], alpha = 0.05), lwd = 2)
}
species_data <- filter(Pentagon_data, Species == gsub(" ", "_", species[i]))
points(x = species_data$Trial_scaled, y = species_data$Distance_scaled, col = pal[4], pch = 19, cex = 1.5)
}
Trial <- 1:max(Zed_data$Trial)
pal <- brewer.pal(n = 8, name = "Dark2")
species <- c("Japanese Macaque", "Vervet")
sample_set <- sample(1:4000, size = 100)
for (i in 1:2) { #loop over each species (column in posterior estimates)
plot(1, type = "n", xlim = c(0, max(Zed_data$Trial_scaled)), ylim = c(3.8,4.5), ylab = NA, xlab = NA, cex.axis = 2, cex.lab = 3, bty = "l") #create empty plotting window.
title(ylab = "log(Distance)", xlab = "log(Trial)", cex.lab = 3, line = 4)
title(main = species[i], line = -2, cex.main = 3)
Distance_mean <- mean(posteriors_Zed$mu_species[,i]) + mean(posteriors_Zed$b_species[,i]) * log(Trial)
lines(x = log(Trial), y = Distance_mean, col = pal[6-i], lwd = 3)
for (j in sample_set) {
lines(x = log(Trial), y = posteriors_Zed$mu_species[j,i] + posteriors_Zed$b_species[j,i] * log(Trial), col = alpha(pal[6-i], alpha = 0.05), lwd = 2)
}
species_data <- filter(Zed_data, Species == gsub(" ", "_", species[i]))
points(x = species_data$Trial_scaled, y = species_data$Distance_scaled, col = pal[6-i], pch = 19, cex = 1.5)
}
par(xpd = NA) #removes gridding of layout for placing geometries across whole plot
#box(which = "figure", col = "red", lwd = 3)
#DT Section
rect(-27,4.7,5.85,5.71, border = "grey30", lwd = 8)
text(x = -10, y = 5.65, labels = "Double Trapezoid", col = "grey30", cex = 6)
#Pentagon Section
rect(-27, 3.62, -10.35, 4.68, border = "grey30", lwd = 8)
text(x = -18.3, y = 4.6, labels = "Pentagon", cex = 6, col = "grey30")
#Zed Section
rect(-10.1, 3.62, 5.85, 4.68, border = "grey30", lwd = 8)
text(x = -1.7, y = 4.6, labels = "Z-Array", cex = 6, col = "grey30")
dev.off()
#Figure for Manuscript
Trial <- 1:max(DT_data$Trial)
pal <- brewer.pal(n = 8, name = "Dark2")
species <- c("Aye Aye", "Dwarf Lemur", "Mouse Lemur", "Vervet")
sample_set <- sample(1:4000, size = 100)
tiff("../Docs/Figure 2_Posterior_Predictions.tif", width = 1600, height = 1200)
layout(matrix(c(1,1,2,2,3,3,4,4,0,5,5,0,6,6,7,7), ncol = 8, byrow = TRUE))
par(mar = c(10,10,8,4))
for (i in 1:4) { #loop over each species (column in posterior estimates)
plot(1, type = "n", xlim = c(0, max(DT_data$Trial_scaled)), ylim = c(4,6.5), ylab = NA, xlab = NA, cex.axis = 2, cex.lab = 3, bty = "l") #create empty plotting window.
title(ylab = "log(Distance)", xlab = "log(Trial)", cex.lab = 3, line = 4)
title(main = species[i], line = -2, cex.main = 3)
Distance_mean <- mean(posteriors_DT$mu_species[,i]) + mean(posteriors_DT$b_species[,i]) * log(Trial)
lines(x = log(Trial), y = Distance_mean, col = pal[i], lwd = 3)
for (j in sample_set) {
lines(x = log(Trial), y = posteriors_DT$mu_species[j,i] + posteriors_DT$b_species[j,i] * log(Trial), col = alpha(pal[i], alpha = 0.05), lwd = 2)
}
species_data <- filter(DT_data, Species == gsub(" ", "_", species[i]))
points(x = species_data$Trial_scaled, y = species_data$Distance_scaled, col = pal[i], pch = 19, cex = 1.5)
}
Trial <- 1:max(Pentagon_data$Trial)
pal <- brewer.pal(n = 8, name = "Dark2")
species <- c("Vervet")
sample_set <- sample(1:4000, size = 100)
#par(mar = c(10,10,10,4))
for (i in 1:1) { #loop over each species (column in posterior estimates)
plot(1, type = "n", xlim = c(0, max(Pentagon_data$Trial_scaled)), ylim = c(3.5,4), ylab = NA, xlab = NA, cex.axis = 2, cex.lab = 3, bty = "l") #create empty plotting window.
title(ylab = "log(Distance)", xlab = "log(Trial)", cex.lab = 3, line = 4)
title(main = species[i], line = -2, cex.main = 3)
Distance_mean <- mean(posteriors_Pentagon$mu_species[,i]) + mean(posteriors_Pentagon$b_species[,i]) * log(Trial)
lines(x = log(Trial), y = Distance_mean, col = pal[4], lwd = 3)
for (j in sample_set) {
lines(x = log(Trial), y = posteriors_Pentagon$mu_species[j,i] + posteriors_Pentagon$b_species[j,i] * log(Trial), col = alpha(pal[4], alpha = 0.05), lwd = 2)
}
species_data <- filter(Pentagon_data, Species == gsub(" ", "_", species[i]))
points(x = species_data$Trial_scaled, y = species_data$Distance_scaled, col = pal[4], pch = 19, cex = 1.5)
}
Trial <- 1:max(Zed_data$Trial)
pal <- brewer.pal(n = 8, name = "Dark2")
species <- c("Japanese Macaque", "Vervet")
sample_set <- sample(1:4000, size = 100)
for (i in 1:2) { #loop over each species (column in posterior estimates)
plot(1, type = "n", xlim = c(0, max(Zed_data$Trial_scaled)), ylim = c(3.8,4.5), ylab = NA, xlab = NA, cex.axis = 2, cex.lab = 3, bty = "l") #create empty plotting window.
title(ylab = "log(Distance)", xlab = "log(Trial)", cex.lab = 3, line = 4)
title(main = species[i], line = -2, cex.main = 3)
Distance_mean <- mean(posteriors_Zed$mu_species[,i]) + mean(posteriors_Zed$b_species[,i]) * log(Trial)
lines(x = log(Trial), y = Distance_mean, col = pal[6-i], lwd = 3)
for (j in sample_set) {
lines(x = log(Trial), y = posteriors_Zed$mu_species[j,i] + posteriors_Zed$b_species[j,i] * log(Trial), col = alpha(pal[6-i], alpha = 0.05), lwd = 2)
}
species_data <- filter(Zed_data, Species == gsub(" ", "_", species[i]))
points(x = species_data$Trial_scaled, y = species_data$Distance_scaled, col = pal[6-i], pch = 19, cex = 1.5)
}
par(xpd = NA) #removes gridding of layout for placing geometries across whole plot
#box(which = "figure", col = "red", lwd = 3)
#DT Section
rect(-27,4.7,5.85,5.71, border = "grey30", lwd = 8)
text(x = -10, y = 5.65, labels = "Double Trapezoid", col = "grey30", cex = 6)
#Pentagon Section
rect(-27, 3.62, -10.35, 4.68, border = "grey30", lwd = 8)
text(x = -18.3, y = 4.6, labels = "Pentagon", cex = 6, col = "grey30")
#Zed Section
rect(-10.1, 3.62, 5.85, 4.68, border = "grey30", lwd = 8)
text(x = -1.7, y = 4.6, labels = "Z-Array", cex = 6, col = "grey30")
dev.off()
#summarize results
print(fit_sim, pars=c("mu_0", "mu_species", "b_0", "b_species", "sigma_mu_id",
"sigma_b_id", "sigma_e", "lp__"),
probs = c(.1, .5,.9))
#View parameter estimates across chains
traceplot(fit_sim, pars = c("mu_0", "mu_species", "b_0", "b_species"), inc_warmup = TRUE)
#Look at parameter distributions and correlations
pairs(fit_sim, pars = c("mu_0", "mu_species"), las = 1)
pairs(fit_sim, pars = c("b_0", "b_species"), las = 1)
pairs(fit_sim, pars = c("mu_0", "b_0"), las = 1)
#residual analysis
r_bar <- apply(extract(fit_sim, "pearson_residual")[[1]], MARGIN = 2, mean)
y_pred <- apply(extract(fit_sim, "y_pred")[[1]], MARGIN = 2, mean)
plot(x = y_pred, y = r_bar) #residuals against prediction
plot(x = stan_data_sim_DT$x, y = r_bar)
plot(x = stan_data_sim_DT$sp, y = r_bar)
qqnorm(r_bar)
setwd("C:/Users/avining/Documents/Manuscripts/Do Primates Trapline")
source("./CODE/seperateTrials.R")
source("./CODE/DET_calculations.R")
source("./CODE/Array_Processing.R")
source("./CODE/Iterative Learning Simulations.R")
source("./CODE/Data_Processing_Functions.R")
data_raw <- read.csv("./DATA/Visits raw.csv")
data_formatted <- dataFormatting(data_raw)
write.csv(data_formatted,"./DATA/Visits_formatted.csv")
data_expanded <- expandData(data_formatted) #puts each location in its own row. Allows analysis of DET by each decision (potentially)
data_expanded <- seperateTrials(data_expanded) #sets unique identifier between trials, prevents transitions between trials from affecting DET
write.csv(data_expanded,"./DATA/Visits Cleaned.csv")
DET_results <- getAllTrialDETs(data_expanded)
knitr::opts_chunk$set(echo = TRUE)
setwd("C:/Users/avining/Documents/Manuscripts/Do Primates Trapline")
#enable easy changes in text size, for tidy LaTeX in pdf
def.chunk.hook  <- knitr::knit_hooks$get("chunk")
knitr::knit_hooks$set(chunk = function(x, options) {
x <- def.chunk.hook(x, options)
ifelse(options$size != "normalsize",
paste0("\n \\", options$size,"\n\n", x, "\n\n \\normalsize"),
x)
})
library(tidyverse)
library(rstan)
library(brms)
library(bayesplot)
library(RColorBrewer)
data_cleaned <- read_csv("./Results/data_cleaned.csv",col_types = "dccccdddddc")
#log/log transform data to model a power function using linear fit
data_cleaned$Distance_scaled <- log(data_cleaned$Distance)
data_cleaned$Trial_scaled <- log(data_cleaned$Trial)
data_cleaned$Source <- gsub("Learning", "Reinforcement", data_cleaned$Source)
sessionInfo()
require(sf)
require(plyr)
buildArray <- function(points) {
#purpose: makes a spatial features collection (sfc) of x,y coordinates from either a list or a matrix of points
#inputs: sets of coordinate pairs, either in a list or matrix.
#output: an sfc with spatial points in the geometry column. Point names will be taken from names of list or rownames of matrix
if (class(points) == "matrix") {
points_list <- alply(.data = points, .margins = 1, .fun = st_point) #create a list with each element equal to the application of st_point to 1 row of the points matrix
points_array <- st_sf(geom = st_sfc(points_list), NAME = unname(attr(points_list, "split_labels"))) #turn points_list into a spatial features dataframe
}
if (class(points) == "list") {
points_list <- lapply(points, st_point) #turn each element of points into an st_point object
if (is.null(names(points_list))) names(points_list) <- as.character(seq(length(points_list))) #name unnamed list
points_array <- st_sf(geom = points_list, NAME = names(points_list)) #turn list into spatial features dataframe
}
return(points_array)
}
getSequenceDistance <- function(sequence, resource_array) {
#purpose: get total distance between all transitions within an array of resources
#input: sequence: a vector of characters or numerics representing names of locations in the array OR a single element that can be split into such
#       resource_Array: a spatial features dataframe with spatial points in the geometry column and the feature NAME
#output: numeric, total distance between transitions
distanceMatrix <- getLabelledDistanceMatrix(resource_array)
distanceTravelled <- 0
if (length(sequence) == 1) sequence <- strsplit(as.character(sequence), NULL)[[1]]
if (sequence[1] == "S") sequence <- sequence[-1]
for (i in 2:length(sequence)) {
if (sequence[i] == "F") return(distanceTravelled)
distanceTravelled <- distanceTravelled + distanceMatrix[sequence[i], sequence[i-1]]
}
return(distanceTravelled)
}
getLabelledDistanceMatrix <- function(points) {
#input: a spatial features dataframe with spatial points in the geometries column and feature NAME, a list of length one containing such
#out: A matrix with distances between each point in the geometry column and axis labelled with NAME
if("list" %in% class(points)) points <- points[[1]]
dMatrix <- st_distance(points)
colnames(dMatrix) <- points$NAME
rownames(dMatrix) <- points$NAME
return(dMatrix)
}
#Create Arrays from Traplining Experiments
Double_Trapezoid <- buildArray(matrix(c(1,-7,-3,-11,-11,11,-1,4,8,7,11,-10), byrow = TRUE, nrow = 6))
Pentagon <- buildArray(matrix(c(-5,-6,-8,2,0,8,8,2,5,-6), byrow = TRUE, nrow = 5))
Z <- buildArray(matrix(c(7,-8,-7,-8,-2,-2,2,2,7,8,-7,8), byrow = TRUE, nrow = 6))
getSequenceDistance("354126", Double_Trapezoid)
getSequenceDistance("345126", Double_Trapezoid)
Predictions <- data.frame(log_Trial = c(1,4,1,4,1,4), type = c("H1", "H1", "H2", "H2","Reference", "Reference"), log_Distance = c(5,4,4,4,5,5))
ggplot(Predictions) + geom_line(aes(x = log_Trial, y = log_Distance, color = type)) +
theme_classic() +
scale_color_brewer(palette = "Dark2")
ggplot(Predictions) + geom_line(aes(x = log_Trial, y = log_Distance, color = type), size = 5) +
theme_classic() +
scale_color_brewer(palette = "Dark2")
ggplot(Predictions) + geom_line(aes(x = log_Trial, y = log_Distance, color = type), size = 5) +
theme_classic() +
scale_color_brewer(palette = "Dark2") +
theme(text = element_text(size = 32))
